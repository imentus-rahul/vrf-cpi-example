/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category UpdateResult
 * @category generated
 */
const updateResultStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>(
  [["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)]],
  "UpdateResultInstructionArgs"
);
/**
 * Accounts required by the _updateResult_ instruction
 * @category Instructions
 * @category UpdateResult
 * @category generated
 */
export type UpdateResultInstructionAccounts = {
  state: web3.PublicKey;
  vrf: web3.PublicKey;
};

const updateResultInstructionDiscriminator = [145, 72, 9, 94, 61, 97, 126, 106];

/**
 * Creates a _UpdateResult_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 *
 * @category Instructions
 * @category UpdateResult
 * @category generated
 */
export function createUpdateResultInstruction(
  accounts: UpdateResultInstructionAccounts
) {
  const { state, vrf } = accounts;

  const [data] = updateResultStruct.serialize({
    instructionDiscriminator: updateResultInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: state,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: vrf,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      "6MLk7G54uHZ7JuzNxpBAVENANrgM9BZ51pKkzGwPYBCE"
    ),
    keys,
    data,
  });
  return ix;
}
